# Giffer Tool Console - Cursor Rules

## Project Overview
This is a GIF creation tool with multiple interfaces:
- **Console**: Command-line interface for batch GIF creation
- **Web**: Flask-based web interface for interactive GIF creation
- **Core**: Shared libraries for image processing and GIF creation

## Code Style & Standards

### Python
- Follow PEP 8 style guidelines
- Use type hints where appropriate
- Prefer f-strings for string formatting
- Use descriptive variable and function names
- Add docstrings for all public functions and classes
- Keep functions focused and single-purpose

### File Organization
- Core functionality goes in `core/` directory
- Interface-specific code goes in respective directories (`console/`, `web/`)
- Shared dependencies in root `requirements.txt`
- Interface-specific dependencies in subdirectory `requirements.txt`

## Development Guidelines

### Image Processing
- Always validate input images before processing
- Handle various image formats (PNG, JPEG, WebP, etc.)
- Implement proper error handling for corrupted or unsupported files
- Use Pillow (PIL) for image manipulation
- Optimize GIF output for file size while maintaining quality

### GIF Creation
- Support configurable frame rates and durations
- Allow custom frame ordering and selection
- Implement proper color palette optimization
- Handle transparency appropriately
- Provide progress feedback for long operations

### Error Handling
- Use specific exception types
- Provide meaningful error messages
- Log errors appropriately
- Gracefully handle missing files or invalid inputs
- Validate user inputs thoroughly

### Performance
- Process images efficiently to avoid memory issues
- Implement progress indicators for long operations
- Consider batch processing for multiple files
- Optimize for both speed and memory usage

## Testing
- Write unit tests for core functionality
- Test with various image formats and sizes
- Test error conditions and edge cases
- Validate GIF output quality and file size

## Documentation
- Keep README files updated with usage examples
- Document all command-line options
- Provide clear error messages and help text
- Include sample images and expected outputs

## Dependencies
- **Core**: Pillow (PIL) for image processing
- **Web**: Flask for web interface
- **Console**: Standard library only (preferred)
- Keep dependencies minimal and well-maintained

## File Naming
- Use snake_case for Python files
- Use descriptive names that indicate purpose
- Batch files should be clearly named (e.g., `create_gif.bat`)

## Security
- Validate all file inputs
- Sanitize file paths to prevent directory traversal
- Limit file sizes to prevent memory exhaustion
- Handle temporary files securely

## Deployment
- Web interface should be deployable to platforms like Railway
- Console tool should work cross-platform
- Include proper requirements files for each component
- Provide clear setup instructions

## Memory Management
- Process images in chunks when possible
- Clean up temporary files
- Monitor memory usage for large batch operations
- Implement proper resource cleanup

## User Experience
- Provide clear progress feedback
- Use intuitive command-line interfaces
- Make web interface responsive and user-friendly
- Include helpful error messages and suggestions
- Support both novice and advanced users
